ðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸ USEMEMO HOOK GUIDE ðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸ

ðŸ‘‰ The useMemo hook in React

useMemo is a hook that is used in the functional component of React that returns a memoized value.

The basic purpose of the useMemo hook is related to the fact that we try to avoid the unnecessary re-rendering of components and props in our program.

We want to make sure that only the components that witness a change in their values are re-rendered; otherwise, thereâ€™s no need to re-render the component and slow down the performance.

Only re-rendering certain components will make your program efficient and improve the overall performance of your React app.


Example 1
Letâ€™s make a simple application to demonstrate the use of the useMemo hook.

The program below has the following components:

Increment button: starts from 0 and increases the count by 1.
Decrement button: Starts from 100 and decrease the count by 1.

const App = () => {
  const [count, setCount] = useState(0);
  const [evenNum,setEvenNum] = useState(2)

  function evenNumDouble(){
    console.log("double");
    return evenNum * 2;
  }
  
  return (
    <>
      <h2>Counter: {count}</h2> 
      <h2>Even Numbers: {evenNum}</h2>
      <h2>even Number Double Value: {evenNumDouble()}</h2>
      <button onClick={() =>setCount(count+1)}>Increment</button>
      <button onClick={()=>setEvenNum(evenNum+2)}>Even Numbers</button>
    </>
  )
}

Explanation:-

When we click the button Even Numbers, the evenNumDouble() function is called because the state of evenNum is changed.

Clicking the Increment button also renders the evenNumDouble() function, although the count state does not change.

This means that every time the evenNumDouble() function is rendered unnecessarily (on the page), the code becomes less efficient. We will fix this with the useMemo hook below.

const App = () => {
  const [count, setCount] = useState(0);
  const [evenNum,setEvenNum] = useState(2)

  const memoHook = useMemo(function evenNumDouble(){
    console.log("double");
    return evenNum * 2;
  }, [evenNum]);
  

  return (
    <>
      <h2>Counter: {count}</h2> 
      <h2>Even Numbers: {evenNum}</h2>
      <h2>even Number Double Value: {memoHook}</h2>
      <button onClick={() =>setCount(count+1)}>Increment</button>
      <button onClick={()=>setEvenNum(evenNum+2)}>Even Numbers</button>
    </>
  )
}

If we run the code above, we will find that our code only runs the evenNumDouble() function as required and not unnecessarily.