🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟 CONTEXT API 🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟

Managing state is an essential part of developing applications in React. A common way to manage state is by passing props. Passing props means sending data from one component to another.

But it can be annoying to pass props when you have to send the same data to lots of components or when components are far away from each other. This can make an application slower and harder to work with. As we discuss in previos lecture about Prop Drilling.

Prop drilling can make your code more difficult to read and maintain, and can also make it harder to refactor your components later on.

This is where the Context API comes in. With Context API, you can store data at the top level of the component tree and make it available to all other components that need it without passing props.

👉 How the Context API Works

Context API allows data to be passed through a component tree without having to pass props manually at every level. This makes it easier to share data between components.

For example, let’s say you have a shopping app with a component that shows a user’s shopping cart, and another component that shows the user’s order history.

With Context API, you can create a “context” that holds the user’s shopping information, like their cart and order history. Then, you can use that context in both the shopping cart and the order history component, without having to pass the information down through props.

👉 How to Get Started with the Context API

To start using the Context API in your applications, you'll need to follow a few simple steps:

1. Create a Context Object
First, you need to create a context object using the createContext function from the 'react' library. This context object will hold the data that you want to share across your application.

Create a new file named MyContext.js in the src folder and add the following code to create a context object:

import { createContext } from 'react';
export const MyContext = createContext("");


2. Wrap Components with a Provider
Once you've created a context object, you need to wrap the components that need access to the shared data with a Provider component. The Provider component accepts a "value" prop that holds the shared data, and any component that is a child of the Provider component can access that shared data.

It's important to note that the Provider component should be wrapped around the top-level component in an application to ensure that all child components have access to the shared data.

const App = () => {

  // Suppose this logic use in many files
  const [text, setText] = useState("");

  return (
    <>
     <MyContext.Provider value={{text, setText}}>
      <MyComponent/>
     </MyContext.Provider> 
    </>
  )
}

In this example, we have a parent component called App. This component has a state variable called "text", which is initially set to an empty string. We've also defined a function called setText that can be used to update the value of text.

Inside the return statement of the App component, we've wrapped the children of this component with the provider component ("MyContext.Provider"). Then we've passed an object to the value prop of the provider component that contains "text" and "setText" values.


3. Consume the Context
Now that we've created the provider component, we need to consume the context in other components. To do this, we use the "useContext" hook from React.

const MyComponent = () => {
  const {text, setText} = useContext(MyContext);
  return (
    <>
      <h1>{text}</h1>
      <button onClick={() => setText("This is example of context api")}>Click Me</button>
    </>
  )
}

In this example, we've used the useContext hook to access the "text" and "setText" variables that were defined in the provider component.

Inside the return statement of "MyComponent", we've rendered a paragraph element that displays the value of text. We've also rendered a button that, when clicked, will call the setText function to update the value of text to "This is example of context api".


👉 Use Cases of Context API

1. Theming
2. User Authentication
3. Accessing data from external sources